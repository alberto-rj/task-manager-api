generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  tasks         Task[]         @relation("TaskOwner")
  assignedTasks Task[]         @relation("TaskAssignee")
  projects      Project[]      @relation("ProjectOwner")
  members       Member[]
  notifications Notification[]
  Comment       Comment[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relationships
  owner   User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks   Task[]
  members Member[]

  @@index([ownerId])
}

model Member {
  id        String     @id @default(uuid())
  userId    String
  projectId String
  role      MemberRole @default(MEMBER)
  createdAt DateTime   @default(now())

  // relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  ownerId     String
  assigneeId  String?
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // relationships
  owner    User          @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignee User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  project  Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  tags     TagsOnTasks[]
  comments Comment[]

  @@index([ownerId])
  @@index([assigneeId])
  @@index([projectId])
  @@index([status])
  @@index([dueDate])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Tag {
  id    String        @id @default(uuid())
  name  String
  color String        @default("#6366F1")
  tasks TagsOnTasks[]

  @@unique([name])
}

model TagsOnTasks {
  tagId     String
  taskId    String
  createdAt DateTime @default(now())

  // Relationships
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([tagId, taskId])
  @@index([tagId])
  @@index([taskId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  userId    String
  taskId    String?
  createdAt DateTime         @default(now())

  // relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  COMMENT_ADDED
  PROJECT_INVITATION
}
