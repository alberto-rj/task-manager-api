generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  username String @unique
  email String @unique
  password String
  timezone String?
  bio String?
  avatar String?
  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  createdProjects Project[] @relation("ProjectAuthor")
  createdTasks Task[] @relation("TaskAuthor")
  assignedTasks Task[] @relation("TaskAssignee")
  members ProjectMember[]
  refreshTokens RefreshToken[]
}

model Project {
  id String @id @default(uuid())
  name String
  description String?
  coverImage String?
  startDate DateTime?
  endDate DateTime?
  isPublic Boolean @default(false)
  isArchived Boolean @default(false)
  archivedAt DateTime?
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  author User @relation("ProjectAuthor",fields: [authorId], references: [id])
  members ProjectMember[]
  tasks Task[]
}

model ProjectMember {
  id String @id @default(uuid())
  projectId String
  memberId String
  role ProjectMemberRole @default(VIEWER)
  inviteStatus ProjectMemberInviteStatus @default(PENDING)
  invitedAt DateTime
  joinedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  project Project @relation(fields: [projectId], references: [id])
  member User @relation(fields: [memberId], references: [id])
}

enum ProjectMemberRole {
  AUTHOR
  ADMIN 
  CONTRIBUTOR 
  VIEWER
}

enum ProjectMemberInviteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Task {
  id String @id @default(uuid())
  title String
  description String?
  status TaskStatus @default(PENDING)
  position Int
  priority TaskPriority @default(MEDIUM)
  dueDate DateTime?
  completedAt DateTime?
  isArchived Boolean @default(false)
  authorId String
  projectId String
  assignedToId String?
  parentTaskId String?
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  subTasks Task[] @relation("SubTasks")

  author User @relation("TaskAuthor", fields: [authorId], references: [id])

  assignedTo User? @relation("TaskAssignee",fields: [assignedToId], references: [id])
  
  project Project @relation(fields: [projectId], references: [id])
  
  parentTask Task? @relation("SubTasks",fields: [parentTaskId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model RefreshToken {
  id String @id @default(uuid())
  token String @unique
  userId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  user User @relation(fields: [userId], references: [id])
}